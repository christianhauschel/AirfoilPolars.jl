var documenterSearchIndex = {"docs":
[{"location":"solve/#Solve","page":"Solve","title":"Solve","text":"","category":"section"},{"location":"solve/","page":"Solve","title":"Solve","text":"init","category":"page"},{"location":"solve/#AirfoilPolars.init","page":"Solve","title":"AirfoilPolars.init","text":"init(af::Airfoil)\n\nInitialize the airfoil for the Xfoil solver.\n\n\n\n\n\n","category":"function"},{"location":"solve/","page":"Solve","title":"Solve","text":"solve","category":"page"},{"location":"solve/#AirfoilPolars.solve","page":"Solve","title":"AirfoilPolars.solve","text":"solve(\n    alpha::Vector, re::Number; \n    n_iter::Int = 100, n_crit::Number = 9.0, \n    xtrip::Tuple = (1.0, 1.0), \n    mach::Number = 0.0, \n    make_nonconverged_nan::Bool = false, \n    interpolate_nonconverged::Bool = false\n)\n\nSolve the airfoil at different angles of attack and Reynolds numbers using Xfoil.\n\nArguments\n\nalpha::Vector: vector of angles of attack\nre::Number: Reynolds number\nn_iter::Int: number of iterations\nn_crit::Number: critical value of the transition criterion\nxtrip::Tuple: transition location\nmach::Number: Mach number\nmake_nonconverged_nan::Bool: if true, the values of cl, cd, and cm for non-converged cases are set to NaN\ninterpolate_nonconverged::Bool: if true, the values of cl, cd, and cm for non-converged cases are interpolated\n\n\n\n\n\n","category":"function"},{"location":"polar/#Polar","page":"Polar","title":"Polar","text":"","category":"section"},{"location":"polar/","page":"Polar","title":"Polar","text":"Polar","category":"page"},{"location":"polar/#AirfoilPolars.Polar","page":"Polar","title":"AirfoilPolars.Polar","text":"Polar\n\nA struct to store airfoil polars.\n\nFields\n\nRe::Float64: Reynolds number\nalpha::Vector{Float64}: angle of attack [deg]\ncl::Vector{Float64}: lift coefficient\ncd::Vector{Float64}: drag coefficient\ncm::Vector{Float64}: moment coefficient\nM::Float64: Mach number\nn_crit::Float64: critical amplification factor\nxtrip::Tuple{Float64,Float64}: transition location\nname_airfoil::String: name of the airfoil\n\n\n\n\n\n","category":"type"},{"location":"polar/","page":"Polar","title":"Polar","text":"smooth","category":"page"},{"location":"polar/#AirfoilPolars.smooth","page":"Polar","title":"AirfoilPolars.smooth","text":"smooth(\n    p::Polar; \n    order_cl=3, order_cd=3, order_cm=3, \n    smoothing_cl=0.01, smoothing_cd=0.0001, smoothing_cm=0.005\n)\n\nSmooths a polar using splines.\n\n\n\n\n\n","category":"function"},{"location":"polar/","page":"Polar","title":"Polar","text":"blend","category":"page"},{"location":"polar/#AirfoilPolars.blend","page":"Polar","title":"AirfoilPolars.blend","text":"blend(p1::Polar, p2::Polar, weight2::Float64)\n\nBlends two polars using a weight.\n\nArguments\n\np1::Polar: first polar\np2::Polar: second polar\nweight2::Float64: weight for the second polar\n\n\n\n\n\n","category":"function"},{"location":"polar/","page":"Polar","title":"Polar","text":"extrapolate","category":"page"},{"location":"polar/#AirfoilPolars.extrapolate","page":"Polar","title":"AirfoilPolars.extrapolate","text":"extrapolate(\n    p::Polar; \n    cd_max::Union{Nothing,Float64}=nothing, \n    AR::Union{Nothing,Float64}=nothing, \n    cd_min=0.001, \n    n_alpha::Int=15\n)\n\nExtrapolate a polar to +/- 180 degrees. This function is based on the Viterna method.\n\nArguments\n\np::Polar: polar to extrapolate\ncd_max::Union{Nothing,Float64}: maximum drag coefficient\nAR::Union{Nothing,Float64}: aspect ratio\ncd_min::Float64: minimum drag coefficient\nn_alpha::Int: number of points to use for extrapolation\n\n\n\n\n\n","category":"function"},{"location":"polar/#Corrections","page":"Polar","title":"Corrections","text":"","category":"section"},{"location":"polar/","page":"Polar","title":"Polar","text":"correction3D","category":"page"},{"location":"polar/#AirfoilPolars.correction3D","page":"Polar","title":"AirfoilPolars.correction3D","text":"correction3D(\n    polar::Polar, \n    r::Float64, c::Float64, u_inf::Float64, Ω::Float64; \n    alpha_max_corr::Float64=30.0, alpha_linear_min::Float64=-5.0, alpha_linear_max::Float64=5.0\n)\n\nApplies 3-D corrections for rotating sections from the 2-D data using the Du and Selig model.\n\nParameters\n\npolar::Polar: 2-D polar\nr::Float64: local radius\nc::Float64: local chord \nu_inf::Float64: local airfoil freestream velocity ≈ √(Vwind^2 + (Ωr)^2)\nΩ::Float64: rotation speed [rad/s]\nalpha_max_corr::Float64: maximum angle of attack to apply full correction\nalpha_linear_min::Float64: angle of attack where linear portion of lift curve slope begins\nalpha_linear_max::Float64: angle of attack where linear portion of lift curve slope ends\n\nReturns\n\npolar::Polar: A new Polar object corrected for 3-D effects\n\nReferences\n\nZ. Du and M. Selig, ‘A 3-D stall-delay model for horizontal axis wind turbine performance prediction’, in 1998 ASME Wind Energy Symposium, Reno, NV, U.S.A.: American Institute of Aeronautics and Astronautics, Jan. 1998. doi: 10.2514/6.1998-21.\n\n\n\n\n\n","category":"function"},{"location":"polar/","page":"Polar","title":"Polar","text":"correction_Mach","category":"page"},{"location":"polar/#AirfoilPolars.correction_Mach","page":"Polar","title":"AirfoilPolars.correction_Mach","text":"correction_Mach(polar::Polar, Ma_new)\n\nCorrects a polar for a new Mach number using Prandtl-Glauert compressibility correction:\n\nc_l = fracc_l M=0sqrt1 - M^2\n\n\n\n\n\n","category":"function"},{"location":"polar/#Miscalleneous","page":"Polar","title":"Miscalleneous","text":"","category":"section"},{"location":"polar/","page":"Polar","title":"Polar","text":"generate_name","category":"page"},{"location":"polar/#AirfoilPolars.generate_name","page":"Polar","title":"AirfoilPolars.generate_name","text":"generate_name(p::Polar; fname_extra=\"\")\n\nGenerates a name for a polar based on its properties.\n\nArguments\n\np::Polar: polar to generate name for\nfname_extra::String: extra string to append to the name\n\n\n\n\n\n","category":"function"},{"location":"polar/","page":"Polar","title":"Polar","text":"plot","category":"page"},{"location":"polar/#AirfoilPolars.plot","page":"Polar","title":"AirfoilPolars.plot","text":"plot(polars::Vector{Polar}; fname=nothing, dpi=300, legend=true)\n\nPlots a vector of polars.\n\n\n\n\n\n","category":"function"},{"location":"#AirfoilPolars","page":"Home","title":"AirfoilPolars","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Polar calculation\nPolar extrapolation\nMach (Glauert) and rotation correction (Du and Selig)\nInspired by AirfoilPreppy [1]","category":"page"},{"location":"#Corrections","page":"Home","title":"Corrections","text":"","category":"section"},{"location":"#Rotation","page":"Home","title":"Rotation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Mach","page":"Home","title":"Mach","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"https://github.com/WISDEM/AirfoilPreppy","category":"page"},{"location":"io/#IO","page":"IO","title":"IO","text":"","category":"section"},{"location":"io/","page":"IO","title":"IO","text":"save","category":"page"},{"location":"io/#AirfoilPolars.save","page":"IO","title":"AirfoilPolars.save","text":"save(p::Polar, fname::String)\n\nSave a polar to a file (.csv or .plr).\n\n\n\n\n\n","category":"function"},{"location":"io/","page":"IO","title":"IO","text":"load","category":"page"},{"location":"io/#AirfoilPolars.load","page":"IO","title":"AirfoilPolars.load","text":"load(fname::String)::Polar\n\nLoad a polar from a file (.csv or .plr).\n\n\n\n\n\n","category":"function"},{"location":"io/#Miscalleneous","page":"IO","title":"Miscalleneous","text":"","category":"section"},{"location":"io/","page":"IO","title":"IO","text":"get_filename_ext","category":"page"},{"location":"io/#AirfoilPolars.get_filename_ext","page":"IO","title":"AirfoilPolars.get_filename_ext","text":"get_filename_ext(fname::String)::Tuple{String, String}\n\nGet the filename and extension from a path.\n\nReturns\n\nfname_noext: Filename w/o extension\next: Extension\n\n\n\n\n\n","category":"function"}]
}
